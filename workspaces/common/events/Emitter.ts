import { Disposable } from 'common/lifecycle';
import { EventHandler } from './EventHandler';
import { Handler } from "./Handler";

/**
 * Emits custom events, and register handlers for those events by subscribing to an instance.
 *
 * @type TEventArgs The type of the event data generated by the event.
 */
export interface Emitter<TEventArgs = void> {

    /** Emits an event using the given arguments.
     *
     * @param args The arguments to emit.
     */
    emit(args: TEventArgs): void;

    /** Adds the given event handler to the list of subscribers.
     *
     * @param handler The event handler function.
     */
    subscribe(handler: Handler): Emitter<TEventArgs>;

    /** Removes an event handler from the list of subscribers.
     *
     * @param handler The event handler to remove.
     */
    unsubscribe(handler: Handler): void;

    /** Clears the list of subscribers. */
    clear(): void;
}

/** Emits custom events and registers handlers for those events by subscribing to an instance. */
export class Emitter<TEventArgs = void> extends Disposable implements Emitter<TEventArgs> {

    private _subscribers: EventHandler[] = [];

    public get subscribers(): EventHandler[] {
        return this._subscribers;
    }

    public emit(args: TEventArgs): Emitter<TEventArgs> {
        // iterate over a copy of the array of listeners, and call them.
        for (const subscriber of this._subscribers.slice(0)) subscriber.emit(args);
        return this;
    }

    public subscribe(handler: Handler): Emitter<TEventArgs> {
        const eventHandler = new EventHandler(handler);
        this._register(eventHandler);
        this._subscribers.push(eventHandler);
        return this;
        // return eventHandler;
    }

    /** Unsubscribe all event handlers. */
    public unsubscribe(): void;

    /** Unsubscribe the given event handler. */
    public unsubscribe(handler: Handler): void;

    public unsubscribe(handler?: Handler): void {
        if (handler === undefined) {
            for (const eventHandler of this._subscribers) { this.unsubscribe(eventHandler.handler); }
        }

        let toUnsubscribe: EventHandler = this._subscribers.find(it => it.handler === handler);

        // dispose of its eventHandler and remove it from the subscribers list
        toUnsubscribe?.dispose();
        this._subscribers = this._subscribers.filter(it => it !== toUnsubscribe);
        toUnsubscribe = undefined;
    }

    public clear(): void {
        for (const it of this._subscribers) it.dispose();
        this._subscribers = [];
    }
}